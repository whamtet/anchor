;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name routes.index, :imports nil, :requires {hiccups.runtime hiccups.runtime, util anchor.util, anchor.util anchor.util}, :uses nil, :defs {anchor {:name routes.index/anchor, :file "src/routes/index.cljc", :line 58, :column 1, :end-line 58, :end-column 12, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 58, :column 6, :end-line 58, :end-column 12}}, injectoid {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([classes kvs & [scripts]])), :doc "a snippet to pump in clojurescript", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}}, :name routes.index/injectoid, :variadic true, :file "src/routes/index.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}, :method-params [(classes kvs [scripts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists ([classes kvs & [scripts]]), :doc "a snippet to pump in clojurescript"}, response {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 11, :column 7, :end-line 11, :end-column 15, :arglists (quote ([body])), :doc "Returns a skeletal Ring response with the given body, status of 200, and no\n  headers."}, :name routes.index/response, :variadic false, :file "src/routes/index.cljc", :end-column 15, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :doc "Returns a skeletal Ring response with the given body, status of 200, and no\n  headers."}, format {:name routes.index/format, :file "src/routes/index.cljc", :line 21, :column 10, :end-line 21, :end-column 21, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 21, :column 15, :end-line 21, :end-column 21}}, injectoid-s {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 53, :column 7, :end-line 53, :end-column 18, :arglists (quote ([classes kvs & [scripts]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}}, :name routes.index/injectoid-s, :variadic true, :file "src/routes/index.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}, :method-params [(classes kvs [scripts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists ([classes kvs & [scripts]])}, css {:name routes.index/css, :file "src/routes/index.cljc", :line 66, :column 1, :end-line 66, :end-column 9, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 66, :column 6, :end-line 66, :end-column 9}}, state {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([class kvs]))}, :name routes.index/state, :variadic false, :file "src/routes/index.cljc", :end-column 12, :method-params ([class kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([class kvs]))}, page {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 70, :column 7, :end-line 70, :end-column 11, :arglists (quote ([classes kvs & [scripts]])), :doc "page with aforementioned snippet", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}}, :name routes.index/page, :variadic true, :file "src/routes/index.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}, :method-params [(classes kvs [scripts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists ([classes kvs & [scripts]]), :doc "page with aforementioned snippet"}, blank-page {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([classes kvs & [scripts]])), :doc "page with aforementioned snippet", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}}, :name routes.index/blank-page, :variadic true, :file "src/routes/index.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(classes kvs [scripts])], :arglists ([classes kvs & [scripts]]), :arglists-meta (nil)}, :method-params [(classes kvs [scripts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists ([classes kvs & [scripts]]), :doc "page with aforementioned snippet"}, map-str {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/index.cljc", :line 19, :column 7, :end-line 19, :end-column 14, :arglists (quote ([f & s])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f s)], :arglists ([f & s]), :arglists-meta (nil)}}, :name routes.index/map-str, :variadic true, :file "src/routes/index.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f s)], :arglists ([f & s]), :arglists-meta (nil)}, :method-params [(f s)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([f & s])}}, :require-macros {hiccup hiccups.core, hiccups.core hiccups.core, util anchor.util, anchor.util anchor.util}, :cljs.analyzer/constants {:seen #{:rel :script :value :width :type :src :headers :div :xml? :status :link :id :class :input :body :href :img :a :height :html}, :order [:status :headers :body :script :input :type :id :value :div :src :a :href :img :width :height :link :rel :xml? :html :class]}, :doc nil}