;; Analyzed by ClojureScript 1.7.170
{:use-macros {defroutes dogfort.middleware.routes-macros, POST dogfort.middleware.routes-macros, let-realised redlobster.macros, promise redlobster.macros, ANY dogfort.middleware.routes-macros, GET dogfort.middleware.routes-macros}, :excludes #{}, :name routes.viewer, :imports nil, :requires {redlobster.http redlobster.http, redlobster.io redlobster.io, redlobster.promise redlobster.promise, model anchor.model, anchor.db anchor.db, redlobster.stream redlobster.stream, io redlobster.io, index routes.index, db anchor.db, promise redlobster.promise, util anchor.util, anchor.model anchor.model, stream redlobster.stream, anchor.util anchor.util, routes.index routes.index, http redlobster.http}, :uses {slurp redlobster.io, format anchor.util}, :defs {fs {:name routes.viewer/fs, :file "src/routes/viewer.cljc", :line 30, :column 6, :end-line 30, :end-column 13, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 30, :column 11, :end-line 30, :end-column 13}}, path-seq {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 32, :column 12, :end-line 32, :end-column 20, :arglists (quote ([s]))}, :name routes.viewer/path-seq, :variadic false, :file "src/routes/viewer.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, mkdirs {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 38, :column 12, :end-line 38, :end-column 18, :arglists (quote ([path]))}, :name routes.viewer/mkdirs, :variadic false, :file "src/routes/viewer.cljc", :end-column 18, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, pipe {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 46, :column 12, :end-line 46, :end-column 16, :arglists (quote ([a b cb]))}, :name routes.viewer/pipe, :variadic false, :file "src/routes/viewer.cljc", :end-column 16, :method-params ([a b cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 46, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b cb]))}, report-html {:name routes.viewer/report-html, :file "src/routes/viewer.cljc", :line 51, :column 20, :end-line 51, :end-column 36, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 51, :column 25, :end-line 51, :end-column 36}}, get-matching-companies {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 54, :column 7, :end-line 54, :end-column 29, :arglists (quote ([company]))}, :name routes.viewer/get-matching-companies, :variadic false, :file "src/routes/viewer.cljc", :end-column 29, :method-params ([company]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([company]))}, clean-text {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 60, :column 7, :end-line 60, :end-column 17, :arglists (quote ([field]))}, :name routes.viewer/clean-text, :variadic false, :file "src/routes/viewer.cljc", :end-column 17, :method-params ([field]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([field]))}, get-report-hints {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 63, :column 7, :end-line 63, :end-column 23, :arglists (quote ([company reporting-period]))}, :name routes.viewer/get-report-hints, :variadic false, :file "src/routes/viewer.cljc", :end-column 23, :method-params ([company reporting-period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([company reporting-period]))}, routes {:name routes.viewer/routes, :file "src/routes/viewer.cljc", :line 77, :column 1, :end-line 77, :end-column 18, :meta {:file "/Users/matthew/clojure/anchor/src/routes/viewer.cljc", :line 77, :column 12, :end-line 77, :end-column 18}}}, :require-macros {dogfort.middleware.routes-macros dogfort.middleware.routes-macros, redlobster.macros redlobster.macros, util anchor.util, anchor.util anchor.util}, :cljs.analyzer/constants {:seen #{:get :file :reporting-period :params :month :report-values :starting-year :year :starting-month :status :factor :url :post :report-manuals :report-metadata :body :company :data}, :order [:get :params :company :reporting-period :post :year :month :starting-year :starting-month :file :factor :url :data :report-values :report-manuals :report-metadata :status :body]}, :doc nil}