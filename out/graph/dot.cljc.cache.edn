;; Analyzed by ClojureScript 1.7.170
{:use-macros {with-gensyms graph.dot}, :excludes #{}, :name graph.dot, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {->literal {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([s]))}, :name graph.dot/->literal, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, node->id {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 128, :column 8, :end-line 128, :end-column 16, :private true, :arglists (quote ([n]))}, :private true, :name graph.dot/node->id, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, default-node-options {:name graph.dot/default-node-options, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 24, :column 1, :end-line 24, :end-column 36, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 24, :column 16, :end-line 24, :end-column 36, :private true}}, format-node {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 112, :column 8, :end-line 112, :end-column 19, :private true, :arglists (quote ([id {:keys [label shape], :as options}]))}, :private true, :name graph.dot/format-node, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 19, :method-params ([id p__9165]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id {:keys [label shape], :as options}]))}, format-edge {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 103, :column 8, :end-line 103, :end-column 19, :private true, :arglists (quote ([src dst {:keys [directed?], :as options}]))}, :private true, :name graph.dot/format-edge, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 19, :method-params ([src dst p__9160]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 3, :fn-var true, :arglists (quote ([src dst {:keys [directed?], :as options}]))}, option-translations {:name graph.dot/option-translations, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 32, :column 1, :end-line 32, :end-column 35, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 32, :column 16, :end-line 32, :end-column 35, :private true}}, escapable-characters {:name graph.dot/escapable-characters, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 9, :column 1, :end-line 9, :end-column 36, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 9, :column 16, :end-line 9, :end-column 36, :private true}}, format-label {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 75, :column 7, :end-line 75, :end-column 19, :arglists (quote ([label]))}, :name graph.dot/format-label, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 19, :method-params ([label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([label]))}, tree->dot {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 279, :column 7, :end-line 279, :end-column 16, :arglists (quote ([branch? children root & {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}}])), :doc "Like tree-seq, but returns a string containing a GraphViz dot file.  Additional options\n   mimic those in graph->dot.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(branch? children root {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}})], :arglists ([branch? children root & {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}}]), :arglists-meta (nil)}}, :name graph.dot/tree->dot, :variadic true, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(branch? children root {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}})], :arglists ([branch? children root & {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}}]), :arglists-meta (nil)}, :method-params [(branch? children root {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 3, :fn-var true, :arglists ([branch? children root & {:keys [vertical? node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor options], :or {vertical? true, node->descriptor (constantly {:label ""}), edge->descriptor (constantly nil), node->cluster (constantly nil), cluster->parent (constantly nil), cluster->descriptor (constantly nil)}}]), :doc "Like tree-seq, but returns a string containing a GraphViz dot file.  Additional options\n   mimic those in graph->dot."}, cluster->id {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 131, :column 8, :end-line 131, :end-column 19, :private true, :arglists (quote ([s]))}, :private true, :name graph.dot/cluster->id, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, default-edge-options {:name graph.dot/default-edge-options, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 27, :column 1, :end-line 27, :end-column 36, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 27, :column 16, :end-line 27, :end-column 36, :private true}}, default-options {:name graph.dot/default-options, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 21, :column 1, :end-line 21, :end-column 31, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 21, :column 16, :end-line 21, :end-column 31, :private true}}, translate-options {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 35, :column 7, :end-line 35, :end-column 24, :arglists (quote ([m]))}, :name graph.dot/translate-options, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, *cluster->id* {:name graph.dot/*cluster->id*, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 126, :column 1, :end-line 126, :end-column 39, :dynamic true, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 126, :column 26, :end-line 126, :end-column 39, :dynamic true, :private true}}, graph->dot {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 142, :column 7, :end-line 142, :end-column 17, :arglists (quote ([nodes adjacent & {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor}])), :doc "Takes a description of a graph, and returns a string describing a GraphViz dot file.\n\n   Requires two fields: `nodes`, which is a list of the nodes in the graph, and `adjacent`, which\n   is a function that takes a node and returns a list of adjacent nodes.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(nodes adjacent {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor})], :arglists ([nodes adjacent & {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor}]), :arglists-meta (nil)}}, :name graph.dot/graph->dot, :variadic true, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(nodes adjacent {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor})], :arglists ([nodes adjacent & {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor}]), :arglists-meta (nil)}, :method-params [(nodes adjacent {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists ([nodes adjacent & {:keys [directed? vertical? options node->descriptor edge->descriptor cluster->parent node->cluster cluster->descriptor], :or {directed? true, vertical? true, node->descriptor (constantly nil), edge->descriptor (constantly nil), cluster->parent (constantly nil), node->cluster (constantly nil), cluster->descriptor (constantly nil)}, :as graph-descriptor}]), :doc "Takes a description of a graph, and returns a string describing a GraphViz dot file.\n\n   Requires two fields: `nodes`, which is a list of the nodes in the graph, and `adjacent`, which\n   is a function that takes a node and returns a list of adjacent nodes."}, escape-string {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 11, :column 8, :end-line 11, :end-column 21, :private true, :arglists (quote ([s])), :doc "Escape characters that are significant for the dot format."}, :private true, :name graph.dot/escape-string, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Escape characters that are significant for the dot format."}, *node->id* {:name graph.dot/*node->id*, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 125, :column 1, :end-line 125, :end-column 36, :dynamic true, :private true, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 125, :column 26, :end-line 125, :end-column 36, :dynamic true, :private true}}, format-options-value {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 61, :column 8, :end-line 61, :end-column 28, :private true, :arglists (quote ([v]))}, :private true, :name graph.dot/format-options-value, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, literal? {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([x]))}, :name graph.dot/literal?, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, format-options {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 93, :column 8, :end-line 93, :end-column 22, :private true, :arglists (quote ([m separator]))}, :private true, :name graph.dot/format-options, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 22, :method-params ([m separator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m separator]))}, unwrap-literal {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :line 54, :column 7, :end-line 54, :end-column 21, :arglists (quote ([x]))}, :name graph.dot/unwrap-literal, :variadic false, :file "/Users/matthew/clojure/anchor/src/graph/dot.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros {graph.dot graph.dot}, :cljs.analyzer/constants {:seen #{:graph.dot/literal :TP :edge :cluster :else :node->cluster :LR :cluster->descriptor :fontname :node :edge->descriptor :dpi :graph.dot/cluster :cluster->parent :node->descriptor :vertical? :label :record :shape :rankdir :options :directed?}, :order [:dpi :vertical? :rankdir :TP :LR :graph.dot/literal :else :label :directed? :shape :record :options :node->descriptor :edge->descriptor :cluster->parent :node->cluster :cluster->descriptor :graph.dot/cluster :edge :node :fontname :cluster]}, :doc nil}