;; Analyzed by ClojureScript 1.7.170
{:name anchor.db, :doc nil, :excludes #{}, :use-macros {let-realised redlobster.macros}, :require-macros {redlobster.macros redlobster.macros}, :uses {read-string cljs.reader}, :requires {io redlobster.io, redlobster.io redlobster.io, redlobster.promise redlobster.promise, cljs.reader cljs.reader}, :imports nil, :defs {db {:name anchor.db/db, :file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 10, :column 1, :end-line 10, :end-column 8, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 10, :column 6, :end-line 10, :end-column 8}}, dump-db {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 12, :column 7, :end-line 12, :end-column 14, :arglists (quote ([]))}, :name anchor.db/dump-db, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, load-db {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 15, :column 7, :end-line 15, :end-column 14, :arglists (quote ([]))}, :name anchor.db/load-db, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-db {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([s data])), :doc "Set collection s to contents data"}, :name anchor.db/set-db, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :end-column 13, :method-params ([s data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s data])), :doc "Set collection s to contents data"}, get-db {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 26, :column 7, :end-line 26, :end-column 13, :arglists (quote ([s])), :doc "Get collection s"}, :name anchor.db/get-db, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Get collection s"}, swap-db {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([s f & args])), :doc "Update collection s to (apply f old-val args)", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(s f args)], :arglists ([s f & args]), :arglists-meta (nil)}}, :name anchor.db/swap-db, :variadic true, :file "/Users/matthew/clojure/anchor/src/anchor/db.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(s f args)], :arglists ([s f & args]), :arglists-meta (nil)}, :method-params [(s f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists ([s f & args]), :doc "Update collection s to (apply f old-val args)"}}}