;; Analyzed by ClojureScript 1.7.170
{:use-macros {let-realised redlobster.macros, promise redlobster.macros}, :excludes #{}, :name anchor.get-icon, :imports nil, :requires {util anchor.util, anchor.util anchor.util, promise redlobster.promise, redlobster.promise redlobster.promise, io redlobster.io, redlobster.io redlobster.io, string clojure.string, clojure.string clojure.string}, :uses nil, :defs {join-paths {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :line 16, :column 8, :end-line 16, :end-column 18, :private true, :arglists (quote ([paths1 [starter & rest :as paths2]]))}, :private true, :name anchor.get-icon/join-paths, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :end-column 18, :method-params ([paths1 p__35496]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([paths1 [starter & rest :as paths2]]))}, absolutize {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([url path])), :doc "Transform base url and path into absolute url.\n  If path is already absolute do nothing.\n  "}, :name anchor.get-icon/absolutize, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :end-column 17, :method-params ([url path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url path])), :doc "Transform base url and path into absolute url.\n  If path is already absolute do nothing.\n  "}, get-link {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :line 47, :column 8, :end-line 47, :end-column 16, :private true, :arglists (quote ([url s])), :doc "find <link> tag"}, :private true, :name anchor.get-icon/get-link, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :end-column 16, :method-params ([url s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url s])), :doc "find <link> tag"}, get-icon {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :line 70, :column 10, :end-line 70, :end-column 18, :arglists (quote ([url])), :doc "Get icon from html <link> metadata"}, :name anchor.get-icon/get-icon, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/get_icon.cljc", :end-column 18, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Get icon from html <link> metadata"}}, :require-macros {redlobster.macros redlobster.macros, util anchor.util, anchor.util anchor.util}, :cljs.analyzer/constants {:seen #{:default}, :order [:default]}, :doc nil}