;; Analyzed by ClojureScript 1.7.170
{:use-macros {promise redlobster.macros}, :excludes #{}, :name anchor.model, :imports nil, :requires {walk clojure.walk, clojure.walk clojure.walk, clojure.set clojure.set, cljs.js cljs.js, redlobster.promise redlobster.promise}, :uses {eval cljs.js, empty-state cljs.js}, :defs {manual-input {:name anchor.model/manual-input, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 55, :column 1, :end-line 55, :end-column 18, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 55, :column 6, :end-line 55, :end-column 18}}, input {:name anchor.model/input, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 54, :column 1, :end-line 54, :end-column 11, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 54, :column 6, :end-line 54, :end-column 11}}, automatic-input {:name anchor.model/automatic-input, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 30, :column 1, :end-line 30, :end-column 21, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 30, :column 6, :end-line 30, :end-column 21}}, dependencies {:name anchor.model/dependencies, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 46, :column 1, :end-line 46, :end-column 18, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 46, :column 6, :end-line 46, :end-column 18}}, model {:name anchor.model/model, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 15, :column 1, :end-line 15, :end-column 11, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 15, :column 6, :end-line 15, :end-column 11}}, final-output {:name anchor.model/final-output, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 57, :column 1, :end-line 57, :end-column 18, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 57, :column 6, :end-line 57, :end-column 18}}, safe-model {:name anchor.model/safe-model, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 59, :column 1, :end-line 59, :end-column 16, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 59, :column 6, :end-line 59, :end-column 16}}, add-output {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 64, :column 7, :end-line 64, :end-column 17, :arglists (quote ([company input-map])), :doc "compute model output"}, :name anchor.model/add-output, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :end-column 17, :method-params ([company input-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([company input-map])), :doc "compute model output"}, output {:name anchor.model/output, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 52, :column 1, :end-line 52, :end-column 12, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 52, :column 6, :end-line 52, :end-column 12}}, state {:name anchor.model/state, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 62, :column 4, :end-line 62, :end-column 14, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 62, :column 9, :end-line 62, :end-column 14}}, nodes {:name anchor.model/nodes, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 43, :column 1, :end-line 43, :end-column 11, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 43, :column 6, :end-line 43, :end-column 11}}, get-nodes {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 37, :column 7, :end-line 37, :end-column 16, :arglists (quote ([form])), :doc "get the nodes for a form"}, :name anchor.model/get-nodes, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "get the nodes for a form"}, node? {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :line 32, :column 8, :end-line 32, :end-column 13, :private true, :arglists (quote ([node]))}, :private true, :name anchor.model/node?, :variadic false, :file "/Users/matthew/clojure/anchor/src/anchor/model.cljc", :end-column 13, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}}, :require-macros {redlobster.macros redlobster.macros, cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{& gross-asset-value income-asset-value new-project-value cljs.core/apply fair-value shares-outstanding leverage * total-liabilities :source cljs.core/zipmap if new-project-return - cljs.core// fair-value-discount cljs.core/let market-cap output__9015__auto__ new-project-expenditure / cash other-assets cljs.core/zero? net-asset-value cljs.core/fn safe-divide share-price vals__9014__auto__ cap-rate nav-discount + cljs.core/merge net-income cljs.core/some :eval}, :order [income-asset-value / net-income cap-rate gross-asset-value + cash other-assets net-asset-value - total-liabilities new-project-value * new-project-expenditure new-project-return fair-value market-cap shares-outstanding share-price nav-discount fair-value-discount leverage safe-divide cljs.core/let cljs.core/fn & vals__9014__auto__ if cljs.core/some cljs.core/zero? cljs.core/apply cljs.core// output__9015__auto__ cljs.core/zipmap cljs.core/merge :eval :source]}, :doc nil}