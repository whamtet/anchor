;; Analyzed by ClojureScript 1.7.170
{:name anchor.optimize, :doc "Use glpk to allocate stocks", :excludes #{}, :use-macros {let-realised redlobster.macros, promise redlobster.macros}, :require-macros {redlobster.macros redlobster.macros, util anchor.util, anchor.util anchor.util}, :uses nil, :requires {update-calculations anchor.update-calculations, anchor.update-calculations anchor.update-calculations, util anchor.util, anchor.util anchor.util, redlobster.promise redlobster.promise, io redlobster.io, redlobster.io redlobster.io, string clojure.string, clojure.string clojure.string}, :imports nil, :defs {streamify-string {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 53, :column 7, :end-line 53, :end-column 23, :arglists (quote ([s]))}, :name anchor.optimize/streamify-string, :variadic false, :file "src/anchor/optimize.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, country-mins {:name anchor.optimize/country-mins, :file "src/anchor/optimize.cljs", :line 29, :column 1, :end-line 29, :end-column 18, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 29, :column 6, :end-line 29, :end-column 18}}, apply-commas {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([s]))}, :name anchor.optimize/apply-commas, :variadic false, :file "src/anchor/optimize.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, country-maxs {:name anchor.optimize/country-maxs, :file "src/anchor/optimize.cljs", :line 30, :column 1, :end-line 30, :end-column 18, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 30, :column 6, :end-line 30, :end-column 18}}, apply-spaces {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 37, :column 7, :end-line 37, :end-column 19, :arglists (quote ([s]))}, :name anchor.optimize/apply-spaces, :variadic false, :file "src/anchor/optimize.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, countries {:name anchor.optimize/countries, :file "src/anchor/optimize.cljs", :line 28, :column 1, :end-line 28, :end-column 15, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 28, :column 6, :end-line 28, :end-column 15}}, stream {:name anchor.optimize/stream, :file "src/anchor/optimize.cljs", :line 16, :column 1, :end-line 16, :end-column 12, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 16, :column 6, :end-line 16, :end-column 12}}, risk-weighting {:name anchor.optimize/risk-weighting, :file "src/anchor/optimize.cljs", :line 32, :column 1, :end-line 32, :end-column 20, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 32, :column 6, :end-line 32, :end-column 20}}, company->country {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 19, :column 8, :end-line 19, :end-column 24, :private true, :arglists (quote ([s]))}, :private true, :name anchor.optimize/company->country, :variadic false, :file "src/anchor/optimize.cljs", :end-column 24, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, parse-results {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([s]))}, :name anchor.optimize/parse-results, :variadic false, :file "src/anchor/optimize.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, stock-max {:name anchor.optimize/stock-max, :file "src/anchor/optimize.cljs", :line 31, :column 1, :end-line 31, :end-column 15, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 31, :column 6, :end-line 31, :end-column 15}}, apply-interpose {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 34, :column 7, :end-line 34, :end-column 22, :arglists (quote ([i s]))}, :name anchor.optimize/apply-interpose, :variadic false, :file "src/anchor/optimize.cljs", :end-column 22, :method-params ([i s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i s]))}, child-process {:name anchor.optimize/child-process, :file "src/anchor/optimize.cljs", :line 17, :column 1, :end-line 17, :end-column 19, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 17, :column 6, :end-line 17, :end-column 19}}, constraint-line {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 43, :column 7, :end-line 43, :end-column 22, :arglists (quote ([constraint-i factors bound]))}, :name anchor.optimize/constraint-line, :variadic false, :file "src/anchor/optimize.cljs", :end-column 22, :method-params ([constraint-i factors bound]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([constraint-i factors bound]))}, slope {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 25, :column 8, :end-line 25, :end-column 13, :private true, :arglists (quote ([risk-weighting {:strs [fair-value-discount leverage]}]))}, :private true, :name anchor.optimize/slope, :variadic false, :file "src/anchor/optimize.cljs", :end-column 13, :method-params ([risk-weighting p__35780]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([risk-weighting {:strs [fair-value-discount leverage]}]))}, optimize {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/anchor/src/anchor/optimize.cljs", :line 65, :column 7, :end-line 65, :end-column 15, :arglists (quote ([] [country-mins country-maxs stock-max risk-weighting])), :doc "Allocate stocks by maximizing a linear multivariate function subject to constraints.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([] [country-mins country-maxs stock-max risk-weighting]), :arglists ([] [country-mins country-maxs stock-max risk-weighting]), :arglists-meta (nil nil)}}, :name anchor.optimize/optimize, :variadic false, :file "src/anchor/optimize.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([] [country-mins country-maxs stock-max risk-weighting]), :arglists ([] [country-mins country-maxs stock-max risk-weighting]), :arglists-meta (nil nil)}, :method-params ([] [country-mins country-maxs stock-max risk-weighting]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 4, :fn-var true, :arglists ([] [country-mins country-maxs stock-max risk-weighting]), :doc "Allocate stocks by maximizing a linear multivariate function subject to constraints."}}}